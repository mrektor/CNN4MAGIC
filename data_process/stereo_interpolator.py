import glob
import multiprocessing
import os
import pickle
import time
from hashlib import md5

import ctapipe
# import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import uproot
from ctapipe.image import tailcuts_clean, hillas_parameters, leakage, concentration
from ctapipe.image.cleaning import number_of_islands
from ctapipe.image.timing_parameters import timing_parameters
from ctapipe.instrument import CameraGeometry
from scipy import interpolate
from tqdm import *


class InterpolateMagic:  # TODO make it parallel

    def __init__(self, step=1):
        self.__xcoord_raw = np.array([0.00000, 28.34699, 5.66940, -22.67760, -28.34699, -5.66940, 22.67760, 56.69399,
                                      34.01639, 11.33880, -17.00820, -45.35519, -51.02459, -56.69399, -34.01639,
                                      -11.33880,
                                      17.00820, 45.35519, 51.02459, 85.04098, 62.36339, 39.68579, 17.00820, -11.33880,
                                      -39.68579, -68.03279, -73.70218, -79.37158, -85.04098, -62.36339, -39.68579,
                                      -17.00820,
                                      11.33880, 39.68579, 68.03279, 73.70218, 79.37158, 113.38798, 90.71038, 68.03279,
                                      45.35519, 22.67760, -5.66940, -34.01639, -62.36339, -90.71038, -96.37978,
                                      -102.04918,
                                      -107.71858, -113.38798, -90.71038, -68.03279, -45.35519, -22.67760, 5.66940,
                                      34.01639,
                                      62.36339, 90.71038, 96.37978, 102.04918, 107.71858, 141.73497, 119.05737,
                                      96.37978,
                                      73.70218, 51.02459, 28.34699, 0.00000, -28.34699, -56.69399, -85.04098,
                                      -113.38798,
                                      -119.05737, -124.72677, -130.39617, -136.06557, -141.73497, -119.05737, -96.37978,
                                      -73.70218,
                                      -51.02459, -28.34699, -0.00000, 28.34699, 56.69399, 85.04098, 113.38798,
                                      119.05737,
                                      124.72677, 130.39617, 136.06557, 170.08196, 147.40437, 124.72677, 102.04918,
                                      79.37158,
                                      56.69399, 34.01639, 5.66940, -22.67760, -51.02459, -79.37158, -107.71858,
                                      -136.06557,
                                      -141.73497, -147.40437, -153.07377, -158.74317, -164.41256, -170.08196,
                                      -147.40437,
                                      -124.72677,
                                      -102.04918, -79.37158, -56.69399, -34.01639, -5.66940, 22.67760, 51.02459,
                                      79.37158,
                                      107.71858, 136.06557, 141.73497, 147.40437, 153.07377, 158.74317, 164.41256,
                                      198.42896,
                                      175.75136, 153.07377, 130.39617, 107.71858, 85.04098, 62.36339, 39.68579,
                                      11.33880,
                                      -17.00820, -45.35519, -73.70218, -102.04918, -130.39617, -158.74317, -164.41256,
                                      -170.08196,
                                      -175.75136, -181.42076, -187.09016, -192.75956, -198.42896, -175.75136,
                                      -153.07377,
                                      -130.39617,
                                      -107.71858, -85.04098, -62.36339, -39.68579, -11.33880, 17.00820, 45.35519,
                                      73.70218,
                                      102.04918, 130.39617, 158.74317, 164.41256, 170.08196, 175.75136, 181.42076,
                                      187.09016,
                                      192.75956, 226.77595, 204.09836, 181.42076, 158.74317, 136.06557, 113.38798,
                                      90.71038,
                                      68.03279, 45.35519, 17.00820, -11.33880, -39.68579, -68.03279, -96.37978,
                                      -124.72677,
                                      -153.07377, -181.42076, -187.09016, -192.75956, -198.42896, -204.09836,
                                      -209.76775,
                                      -215.43715,
                                      -221.10655, -226.77595, -204.09836, -181.42076, -158.74317, -136.06557,
                                      -113.38798,
                                      -90.71038,
                                      -68.03279, -45.35519, -17.00820, 11.33880, 39.68579, 68.03279, 96.37978,
                                      124.72677,
                                      153.07377, 181.42076, 187.09016, 192.75956, 198.42896, 204.09836, 209.76775,
                                      215.43715,
                                      221.10655, 255.12294, 232.44535, 209.76775, 187.09016, 164.41256, 141.73497,
                                      119.05737,
                                      96.37978, 73.70218, 51.02459, 22.67760, -5.66940, -34.01639, -62.36339, -90.71038,
                                      -119.05737, -147.40437, -175.75136, -204.09836, -209.76775, -215.43715,
                                      -221.10655,
                                      -226.77595,
                                      -232.44535, -238.11475, -243.78415, -249.45355, -255.12294, -232.44535,
                                      -209.76775,
                                      -187.09016,
                                      -164.41256, -141.73497, -119.05737, -96.37978, -73.70218, -51.02459, -22.67760,
                                      5.66940,
                                      34.01639, 62.36339, 90.71038, 119.05737, 147.40437, 175.75136, 204.09836,
                                      209.76775,
                                      215.43715, 221.10655, 226.77595, 232.44535, 238.11475, 243.78415, 249.45355,
                                      283.46994,
                                      260.79234, 238.11475, 215.43715, 192.75956, 170.08196, 147.40437, 124.72677,
                                      102.04918,
                                      79.37158, 56.69399, 28.34699, 0.00000, -28.34699, -56.69399, -85.04098,
                                      -113.38798,
                                      -141.73497, -170.08196, -198.42896, -226.77595, -232.44535, -238.11475,
                                      -243.78415,
                                      -249.45355,
                                      -255.12294, -260.79234, -266.46174, -272.13114, -277.80054, -283.46994,
                                      -260.79234,
                                      -238.11475,
                                      -215.43715, -192.75956, -170.08196, -147.40437, -124.72677, -102.04918, -79.37158,
                                      -56.69399,
                                      -28.34699, -0.00000, 28.34699, 56.69399, 85.04098, 113.38798, 141.73497,
                                      170.08196,
                                      198.42896, 226.77595, 232.44535, 238.11475, 243.78415, 249.45355, 255.12294,
                                      260.79234,
                                      266.46174, 272.13114, 277.80054, 311.81693, 289.13934, 266.46174, 243.78415,
                                      221.10655,
                                      198.42896, 175.75136, 153.07377, 130.39617, 107.71858, 85.04098, 62.36339,
                                      34.01639,
                                      5.66940, -22.67760, -51.02459, -79.37158, -107.71858, -136.06557, -164.41256,
                                      -192.75956,
                                      -221.10655, -249.45355, -255.12294, -260.79234, -266.46174, -272.13114,
                                      -277.80054,
                                      -283.46994,
                                      -289.13934, -294.80874, -300.47814, -306.14753, -311.81693, -289.13934,
                                      -266.46174,
                                      -243.78415,
                                      -221.10655, -198.42896, -175.75136, -153.07377, -130.39617, -107.71858, -85.04098,
                                      -62.36339,
                                      -34.01639, -5.66940, 22.67760, 51.02459, 79.37158, 107.71858, 136.06557,
                                      164.41256,
                                      192.75956, 221.10655, 249.45355, 255.12294, 260.79234, 266.46174, 272.13114,
                                      277.80054,
                                      283.46994, 289.13934, 294.80874, 300.47814, 306.14753, 340.16393, 317.48633,
                                      294.80874,
                                      272.13114, 249.45355, 226.77595, 204.09836, 181.42076, 158.74317, 136.06557,
                                      113.38798,
                                      90.71038, 68.03279, 39.68579, 11.33880, -17.00820, -45.35519, -73.70218,
                                      -102.04918,
                                      -130.39617, -158.74317, -187.09016, -215.43715, -243.78415, -272.13114,
                                      -277.80054,
                                      -283.46994,
                                      -289.13934, -294.80874, -300.47814, -306.14753, -311.81693, -317.48633,
                                      -323.15573,
                                      -328.82513,
                                      -334.49453, -340.16393, -317.48633, -294.80874, -272.13114, -249.45355,
                                      -226.77595,
                                      -204.09836,
                                      -181.42076, -158.74317, -136.06557, -113.38798, -90.71038, -68.03279, -39.68579,
                                      -11.33880,
                                      17.00820, 45.35519, 73.70218, 102.04918, 130.39617, 158.74317, 187.09016,
                                      215.43715,
                                      243.78415, 272.13114, 277.80054, 283.46994, 289.13934, 294.80874, 300.47814,
                                      306.14753,
                                      311.81693, 317.48633, 323.15573, 328.82513, 334.49453, 368.51092, 345.83333,
                                      323.15573,
                                      300.47814, 277.80054, 255.12294, 232.44535, 209.76775, 187.09016, 164.41256,
                                      141.73497,
                                      119.05737, 96.37978, 73.70218, 45.35519, 17.00820, -11.33880, -39.68579,
                                      -68.03279,
                                      -96.37978, -124.72677, -153.07377, -181.42076, -209.76775, -238.11475, -266.46174,
                                      -294.80874,
                                      -300.47814, -306.14753, -311.81693, -317.48633, -323.15573, -328.82513,
                                      -334.49453,
                                      -340.16393,
                                      -345.83333, -351.50272, -357.17212, -362.84152, -368.51092, -345.83333,
                                      -323.15573,
                                      -300.47814,
                                      -277.80054, -255.12294, -232.44535, -209.76775, -187.09016, -164.41256,
                                      -141.73497,
                                      -119.05737,
                                      -96.37978, -73.70218, -45.35519, -17.00820, 11.33880, 39.68579, 68.03279,
                                      96.37978,
                                      124.72677, 153.07377, 181.42076, 209.76775, 238.11475, 266.46174, 294.80874,
                                      300.47814,
                                      306.14753, 311.81693, 317.48633, 323.15573, 328.82513, 334.49453, 340.16393,
                                      345.83333,
                                      351.50272, 357.17212, 362.84152, 396.85791, 374.18032, 351.50272, 328.82513,
                                      306.14753,
                                      283.46994, 260.79234, 238.11475, 215.43715, 192.75956, 170.08196, 147.40437,
                                      124.72677,
                                      102.04918, 79.37158, 51.02459, 22.67760, -5.66940, -34.01639, -62.36339,
                                      -90.71038,
                                      -119.05737, -147.40437, -175.75136, -204.09836, -232.44535, -260.79234,
                                      -289.13934,
                                      -317.48633,
                                      -323.15573, -328.82513, -334.49453, -340.16393, -345.83333, -351.50272,
                                      -357.17212,
                                      -362.84152,
                                      -368.51092, -374.18032, -379.84972, -385.51912, -391.18852, -396.85791,
                                      -374.18032,
                                      -351.50272,
                                      -328.82513, -306.14753, -283.46994, -260.79234, -238.11475, -215.43715,
                                      -192.75956,
                                      -170.08196,
                                      -147.40437, -124.72677, -102.04918, -79.37158, -51.02459, -22.67760, 5.66940,
                                      34.01639,
                                      62.36339, 90.71038, 119.05737, 147.40437, 175.75136, 204.09836, 232.44535,
                                      260.79234,
                                      289.13934, 317.48633, 323.15573, 328.82513, 334.49453, 340.16393, 345.83333,
                                      351.50272,
                                      357.17212, 362.84152, 368.51092, 374.18032, 379.84972, 385.51912, 391.18852,
                                      425.20491,
                                      402.52731, 379.84972, 357.17212, 334.49453, 311.81693, 289.13934, 266.46174,
                                      243.78415,
                                      221.10655, 198.42896, 175.75136, 153.07377, 130.39617, 107.71858, 85.04098,
                                      56.69399,
                                      28.34699, 0.00000, -28.34699, -56.69399, -85.04098, -113.38798, -141.73497,
                                      -170.08196,
                                      -198.42896, -226.77595, -255.12294, -283.46994, -311.81693, -340.16393,
                                      -345.83333,
                                      -351.50272,
                                      -357.17212, -362.84152, -368.51092, -374.18032, -379.84972, -385.51912,
                                      -391.18852,
                                      -396.85791,
                                      -402.52731, -408.19671, -413.86611, -419.53551, -425.20491, -402.52731,
                                      -379.84972,
                                      -357.17212,
                                      -334.49453, -311.81693, -289.13934, -266.46174, -243.78415, -221.10655,
                                      -198.42896,
                                      -175.75136,
                                      -153.07377, -130.39617, -107.71858, -85.04098, -56.69399, -28.34699, -0.00000,
                                      28.34699,
                                      56.69399, 85.04098, 113.38798, 141.73497, 170.08196, 198.42896, 226.77595,
                                      255.12294,
                                      283.46994, 311.81693, 340.16393, 345.83333, 351.50272, 357.17212, 362.84152,
                                      368.51092,
                                      374.18032, 379.84972, 385.51912, 391.18852, 396.85791, 402.52731, 408.19671,
                                      413.86611,
                                      419.53551, 453.55190, 430.87431, 408.19671, 385.51912, 362.84152, 340.16393,
                                      317.48633,
                                      294.80874, 272.13114, 249.45355, 226.77595, 204.09836, 181.42076, 158.74317,
                                      136.06557,
                                      113.38798, 90.71038, 62.36339, 34.01639, 5.66940, -22.67760, -51.02459, -79.37158,
                                      -107.71858, -136.06557, -164.41256, -192.75956, -221.10655, -249.45355,
                                      -277.80054,
                                      -306.14753,
                                      -334.49453, -362.84152, -368.51092, -374.18032, -379.84972, -385.51912,
                                      -391.18852,
                                      -396.85791,
                                      -402.52731, -408.19671, -413.86611, -419.53551, -425.20491, -430.87431,
                                      -436.54371,
                                      -442.21310,
                                      -447.88250, -453.55190, -430.87431, -408.19671, -385.51912, -362.84152,
                                      -340.16393,
                                      -317.48633,
                                      -294.80874, -272.13114, -249.45355, -226.77595, -204.09836, -181.42076,
                                      -158.74317,
                                      -136.06557,
                                      -113.38798, -90.71038, -62.36339, -34.01639, -5.66940, 22.67760, 51.02459,
                                      79.37158,
                                      107.71858, 136.06557, 164.41256, 192.75956, 221.10655, 249.45355, 277.80054,
                                      306.14753,
                                      334.49453, 362.84152, 368.51092, 374.18032, 379.84972, 385.51912, 391.18852,
                                      396.85791,
                                      402.52731, 408.19671, 413.86611, 419.53551, 425.20491, 430.87431, 436.54371,
                                      442.21310,
                                      447.88250, 459.22130, 436.54371, 413.86611, 391.18852, 368.51092, 345.83333,
                                      323.15573,
                                      300.47814, 277.80054, 255.12294, 232.44535, 209.76775, 187.09016, 164.41256,
                                      141.73497,
                                      119.05737, 68.03279, 39.68579, 11.33880, -17.00820, -45.35519, -73.70218,
                                      -102.04918,
                                      -130.39617, -158.74317, -187.09016, -215.43715, -243.78415, -272.13114,
                                      -300.47814,
                                      -328.82513,
                                      -357.17212, -391.18852, -396.85791, -402.52731, -408.19671, -413.86611,
                                      -419.53551,
                                      -425.20491,
                                      -430.87431, -436.54371, -442.21310, -447.88250, -453.55190, -459.22130,
                                      -464.89070,
                                      -470.56010,
                                      -476.22950, -459.22130, -436.54371, -413.86611, -391.18852, -368.51092,
                                      -345.83333,
                                      -323.15573,
                                      -300.47814, -277.80054, -255.12294, -232.44535, -209.76775, -187.09016,
                                      -164.41256,
                                      -141.73497,
                                      -119.05737, -68.03279, -39.68579, -11.33880, 17.00820, 45.35519, 73.70218,
                                      102.04918,
                                      130.39617, 158.74317, 187.09016, 215.43715, 243.78415, 272.13114, 300.47814,
                                      328.82513,
                                      357.17212, 391.18852, 396.85791, 402.52731, 408.19671, 413.86611, 419.53551,
                                      425.20491,
                                      430.87431, 436.54371, 442.21310, 447.88250, 453.55190, 459.22130, 464.89070,
                                      470.56010,
                                      476.22950, 442.21310, 419.53551, 396.85791, 374.18032, 351.50272, 328.82513,
                                      306.14753,
                                      283.46994, 260.79234, 238.11475, 215.43715, 192.75956, 170.08196, 17.00820,
                                      -11.33880,
                                      -39.68579, -68.03279, -96.37978, -124.72677, -153.07377, -181.42076, -209.76775,
                                      -238.11475,
                                      -266.46174, -294.80874, -323.15573, -425.20491, -430.87431, -436.54371,
                                      -442.21310,
                                      -447.88250,
                                      -453.55190, -459.22130, -464.89070, -470.56010, -476.22950, -481.89890,
                                      -487.56829,
                                      -493.23769,
                                      -442.21310, -419.53551, -396.85791, -374.18032, -351.50272, -328.82513,
                                      -306.14753,
                                      -283.46994,
                                      -260.79234, -238.11475, -215.43715, -192.75956, -170.08196, -17.00820, 11.33880,
                                      39.68579,
                                      68.03279, 96.37978, 124.72677, 153.07377, 181.42076, 209.76775, 238.11475,
                                      266.46174,
                                      294.80874, 323.15573, 425.20491, 430.87431, 436.54371, 442.21310, 447.88250,
                                      453.55190,
                                      459.22130, 464.89070, 470.56010, 476.22950, 481.89890, 487.56829, 493.23769,
                                      402.52731,
                                      379.84972, 357.17212, 334.49453, 311.81693, 289.13934, 266.46174, 243.78415,
                                      -62.36339,
                                      -90.71038, -119.05737, -147.40437, -175.75136, -204.09836, -232.44535, -260.79234,
                                      -464.89070,
                                      -470.56010, -476.22950, -481.89890, -487.56829, -493.23769, -498.90709,
                                      -504.57649,
                                      -402.52731,
                                      -379.84972, -357.17212, -334.49453, -311.81693, -289.13934, -266.46174,
                                      -243.78415,
                                      62.36339,
                                      90.71038, 119.05737, 147.40437, 175.75136, 204.09836, 232.44535, 260.79234,
                                      464.89070,
                                      470.56010, 476.22950, 481.89890, 487.56829, 493.23769, 498.90709, 504.57649,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
                                      400.00000,
                                      400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000])
        self.__ycoord_raw = np.array(
            [0.00000, 9.81969, 29.45906, 19.63937, -9.81969, -29.45906, -19.63937, 19.63937,  # 8
             39.27875, 58.91812, 49.09843, 39.27875, 9.81969, -19.63937, -39.27875, -58.91812,  # 16
             -49.09843, -39.27875, -9.81969, 29.45906, 49.09843, 68.73781, 88.37718, 78.55749,  # 24
             68.73781, 58.91812, 29.45906, 0.00000, -29.45906, -49.09843, -68.73781, -88.37718,
             # 32
             -78.55749, -68.73781, -58.91812, -29.45906, 0.00000, 39.27875, 58.91812, 78.55749,
             # 40
             98.19687, 117.83624, 108.01655, 98.19687, 88.37718, 78.55749, 49.09843, 19.63937,  # 48
             -9.81969, -39.27875, -58.91812, -78.55749, -98.19687, -117.83624, -108.01655,
             -98.19687,  # 56
             -88.37718, -78.55749, -49.09843, -19.63937, 9.81969, 49.09843, 68.73781, 88.37718,
             # 64
             108.01655, 127.65593, 147.29530, 137.47561, 127.65593, 117.83624, 108.01655, 98.19687,
             # 72
             68.73781, 39.27875, 9.81969, -19.63937, -49.09843, -68.73781, -88.37718, -108.01655,
             # 80
             -127.65593, -147.29530, -137.47561, -127.65593, -117.83624, -108.01655, -98.19687,
             -68.73781,  # 88
             -39.27875, -9.81969, 19.63937, 58.91812, 78.55749, 98.19687, 117.83624, 137.47561,
             # 96
             157.11499, 176.75436, 166.93467, 157.11499, 147.29530, 137.47561, 127.65593, 117.83624,
             # 104
             88.37718, 58.91812, 29.45906, 0.00000, -29.45906, -58.91812, -78.55749, -98.19687,
             # 112
             -117.83624, -137.47561, -157.11499, -176.75436, -166.93467, -157.11499, -147.29530,
             -137.47561,  # 120
             -127.65593, -117.83624, -88.37718, -58.91812, -29.45906, 0.00000, 29.45906, 68.73781,
             # 128
             88.37718, 108.01655, 127.65593, 147.29530, 166.93467, 186.57405, 206.21342, 196.39373,
             # 136
             186.57405, 176.75436, 166.93467, 157.11499, 147.29530, 137.47561, 108.01655, 78.55749,
             # 144
             49.09843, 19.63937, -9.81969, -39.27875, -68.73781, -88.37718, -108.01655, -127.65593,
             # 152
             -147.29530, -166.93467, -186.57405, -206.21342, -196.39373, -186.57405, -176.75436,
             -166.93467,  # 160
             -157.11499, -147.29530, -137.47561, -108.01655, -78.55749, -49.09843, -19.63937,
             9.81969,  # 168
             39.27875, 78.55749, 98.19687, 117.83624, 137.47561, 157.11499, 176.75436, 196.39373,
             # 176
             216.03311, 235.67248, 225.85279, 216.03311, 206.21342, 196.39373, 186.57405, 176.75436,
             # 184
             166.93467, 157.11499, 127.65593, 98.19687, 68.73781, 39.27875, 9.81969, -19.63937,
             # 192
             -49.09843, -78.55749, -98.19687, -117.83624, -137.47561, -157.11499, -176.75436,
             -196.39373,  # 200
             -216.03311, -235.67248, -225.85279, -216.03311, -206.21342, -196.39373, -186.57405,
             -176.75436,  # 208
             -166.93467, -157.11499, -127.65593, -98.19687, -68.73781, -39.27875, -9.81969,
             19.63937,  # 216
             49.09843, 88.37718, 108.01655, 127.65593, 147.29530, 166.93467, 186.57405, 206.21342,
             # 224
             225.85279, 245.49217, 265.13154, 255.31185, 245.49217, 235.67248, 225.85279, 216.03311,
             # 232
             206.21342, 196.39373, 186.57405, 176.75436, 147.29530, 117.83624, 88.37718, 58.91812,
             # 240
             29.45906, 0.00000, -29.45906, -58.91812, -88.37718, -108.01655, -127.65593, -147.29530,
             # 248
             -166.93467, -186.57405, -206.21342, -225.85279, -245.49217, -265.13154, -255.31185,
             -245.49217,  # 256
             -235.67248, -225.85279, -216.03311, -206.21342, -196.39373, -186.57405, -176.75436,
             -147.29530,  # 264
             -117.83624, -88.37718, -58.91812, -29.45906, 0.00000, 29.45906, 58.91812, 98.19687,
             # 272
             117.83624, 137.47561, 157.11499, 176.75436, 196.39373, 216.03311, 235.67248, 255.31185,
             # 280
             274.95123, 294.59060, 284.77092, 274.95123, 265.13154, 255.31185, 245.49217, 235.67248,
             # 288
             225.85279, 216.03311, 206.21342, 196.39373, 166.93467, 137.47561, 108.01655, 78.55749,
             # 296
             49.09843, 19.63937, -9.81969, -39.27875, -68.73781, -98.19687, -117.83624, -137.47561,
             # 304
             -157.11499, -176.75436, -196.39373, -216.03311, -235.67248, -255.31185, -274.95123,
             -294.59060,  # 312
             -284.77092, -274.95123, -265.13154, -255.31185, -245.49217, -235.67248, -225.85279,
             -216.03311,  # 320
             -206.21342, -196.39373, -166.93467, -137.47561, -108.01655, -78.55749, -49.09843,
             -19.63937,  # 328
             9.81969, 39.27875, 68.73781, 108.01655, 127.65593, 147.29530, 166.93467, 186.57405,
             # 336
             206.21342, 225.85279, 245.49217, 265.13154, 284.77092, 304.41029, 324.04966, 314.22998,
             # 344
             304.41029, 294.59060, 284.77092, 274.95123, 265.13154, 255.31185, 245.49217, 235.67248,
             # 352
             225.85279, 216.03311, 186.57405, 157.11499, 127.65593, 98.19687, 68.73781, 39.27875,
             # 360
             9.81969, -19.63937, -49.09843, -78.55749, -108.01655, -127.65593, -147.29530,
             -166.93467,  # 368
             -186.57405, -206.21342, -225.85279, -245.49217, -265.13154, -284.77092, -304.41029,
             -324.04966,  # 376
             -314.22998, -304.41029, -294.59060, -284.77092, -274.95123, -265.13154, -255.31185,
             -245.49217,  # 384
             -235.67248, -225.85279, -216.03311, -186.57405, -157.11499, -127.65593, -98.19687,
             -68.73781,  # 392
             -39.27875, -9.81969, 19.63937, 49.09843, 78.55749, 117.83624, 137.47561, 157.11499,
             # 400
             176.75436, 196.39373, 216.03311, 235.67248, 255.31185, 274.95123, 294.59060, 314.22998,
             # 408
             333.86935, 353.50872, 343.68904, 333.86935, 324.04966, 314.22998, 304.41029, 294.59060,
             # 416
             284.77092, 274.95123, 265.13154, 255.31185, 245.49217, 235.67248, 206.21342, 176.75436,
             # 424
             147.29530, 117.83624, 88.37718, 58.91812, 29.45906, 0.00000, -29.45906, -58.91812,
             # 432
             -88.37718, -117.83624, -137.47561, -157.11499, -176.75436, -196.39373, -216.03311,
             -235.67248,  # 440
             -255.31185, -274.95123, -294.59060, -314.22998, -333.86935, -353.50872, -343.68904,
             -333.86935,  # 448
             -324.04966, -314.22998, -304.41029, -294.59060, -284.77092, -274.95123, -265.13154,
             -255.31185,  # 456
             -245.49217, -235.67248, -206.21342, -176.75436, -147.29530, -117.83624, -88.37718,
             -58.91812,  # 464
             -29.45906, 0.00000, 29.45906, 58.91812, 88.37718, 127.65593, 147.29530, 166.93467,
             # 472
             186.57405, 206.21342, 225.85279, 245.49217, 265.13154, 284.77092, 304.41029, 324.04966,
             # 480
             343.68904, 363.32841, 382.96778, 373.14810, 363.32841, 353.50872, 343.68904, 333.86935,
             # 488
             324.04966, 314.22998, 304.41029, 294.59060, 284.77092, 274.95123, 265.13154, 255.31185,
             # 496
             225.85279, 196.39373, 166.93467, 137.47561, 108.01655, 78.55749, 49.09843, 19.63937,
             # 504
             -9.81969, -39.27875, -68.73781, -98.19687, -127.65593, -147.29530, -166.93467,
             -186.57405,  # 512
             -206.21342, -225.85279, -245.49217, -265.13154, -284.77092, -304.41029, -324.04966,
             -343.68904,  # 520
             -363.32841, -382.96778, -373.14810, -363.32841, -353.50872, -343.68904, -333.86935,
             -324.04966,  # 528
             -314.22998, -304.41029, -294.59060, -284.77092, -274.95123, -265.13154, -255.31185,
             -225.85279,  # 536
             -196.39373, -166.93467, -137.47561, -108.01655, -78.55749, -49.09843, -19.63937,
             9.81969,  # 544
             39.27875, 68.73781, 98.19687, 137.47561, 157.11499, 176.75436, 196.39373, 216.03311,
             # 552
             235.67248, 255.31185, 274.95123, 294.59060, 314.22998, 333.86935, 353.50872, 373.14810,
             # 560
             392.78747, 412.42684, 402.60716, 392.78747, 382.96778, 373.14810, 363.32841, 353.50872,
             # 568
             343.68904, 333.86935, 324.04966, 314.22998, 304.41029, 294.59060, 284.77092, 274.95123,
             # 576
             245.49217, 216.03311, 186.57405, 157.11499, 127.65593, 98.19687, 68.73781, 39.27875,
             # 584
             9.81969, -19.63937, -49.09843, -78.55749, -108.01655, -137.47561, -157.11499,
             -176.75436,  # 592
             -196.39373, -216.03311, -235.67248, -255.31185, -274.95123, -294.59060, -314.22998,
             -333.86935,  # 600
             -353.50872, -373.14810, -392.78747, -412.42684, -402.60716, -392.78747, -382.96778,
             -373.14810,  # 608
             -363.32841, -353.50872, -343.68904, -333.86935, -324.04966, -314.22998, -304.41029,
             -294.59060,  # 616
             -284.77092, -274.95123, -245.49217, -216.03311, -186.57405, -157.11499, -127.65593,
             -98.19687,  # 624
             -68.73781, -39.27875, -9.81969, 19.63937, 49.09843, 78.55749, 108.01655, 147.29530,
             # 632
             166.93467, 186.57405, 206.21342, 225.85279, 245.49217, 265.13154, 284.77092, 304.41029,
             # 640
             324.04966, 343.68904, 363.32841, 382.96778, 402.60716, 422.24653, 441.88590, 432.06622,
             # 648
             422.24653, 412.42684, 402.60716, 392.78747, 382.96778, 373.14810, 363.32841, 353.50872,
             # 656
             343.68904, 333.86935, 324.04966, 314.22998, 304.41029, 294.59060, 265.13154, 235.67248,
             # 664
             206.21342, 176.75436, 147.29530, 117.83624, 88.37718, 58.91812, 29.45906, 0.00000,
             # 672
             -29.45906, -58.91812, -88.37718, -117.83624, -147.29530, -166.93467, -186.57405,
             -206.21342,  # 680
             -225.85279, -245.49217, -265.13154, -284.77092, -304.41029, -324.04966, -343.68904,
             -363.32841,  # 688
             -382.96778, -402.60716, -422.24653, -441.88590, -432.06622, -422.24653, -412.42684,
             -402.60716,  # 696
             -392.78747, -382.96778, -373.14810, -363.32841, -353.50872, -343.68904, -333.86935,
             -324.04966,  # 704
             -314.22998, -304.41029, -294.59060, -265.13154, -235.67248, -206.21342, -176.75436,
             -147.29530,  # 712
             -117.83624, -88.37718, -58.91812, -29.45906, 0.00000, 29.45906, 58.91812, 88.37718,
             # 720
             117.83624, 157.11499, 176.75436, 196.39373, 216.03311, 235.67248, 255.31185, 274.95123,
             # 728
             294.59060, 314.22998, 333.86935, 353.50872, 373.14810, 392.78747, 412.42684, 432.06622,
             # 736
             451.70559, 471.34496, 461.52528, 451.70559, 441.88590, 432.06622, 422.24653, 412.42684,
             # 744
             402.60716, 392.78747, 382.96778, 373.14810, 363.32841, 353.50872, 343.68904, 333.86935,
             # 752
             324.04966, 314.22998, 284.77092, 255.31185, 225.85279, 196.39373, 166.93467, 137.47561,
             # 760
             108.01655, 78.55749, 49.09843, 19.63937, -9.81969, -39.27875, -68.73781, -98.19687,
             # 768
             -127.65593, -157.11499, -176.75436, -196.39373, -216.03311, -235.67248, -255.31185,
             -274.95123,  # 776
             -294.59060, -314.22998, -333.86935, -353.50872, -373.14810, -392.78747, -412.42684,
             -432.06622,  # 784
             -451.70559, -471.34496, -461.52528, -451.70559, -441.88590, -432.06622, -422.24653,
             -412.42684,  # 792
             -402.60716, -392.78747, -382.96778, -373.14810, -363.32841, -353.50872, -343.68904,
             -333.86935,  # 800
             -324.04966, -314.22998, -284.77092, -255.31185, -225.85279, -196.39373, -166.93467,
             -137.47561,  # 808
             -108.01655, -78.55749, -49.09843, -19.63937, 9.81969, 39.27875, 68.73781, 98.19687,
             # 816
             127.65593, 186.57405, 206.21342, 225.85279, 245.49217, 265.13154, 284.77092, 304.41029,
             # 824
             324.04966, 343.68904, 363.32841, 382.96778, 402.60716, 422.24653, 441.88590, 461.52528,
             # 832
             481.16465, 490.98434, 481.16465, 471.34496, 461.52528, 451.70559, 441.88590, 432.06622,
             # 840
             422.24653, 412.42684, 402.60716, 392.78747, 382.96778, 373.14810, 363.32841, 353.50872,
             # 848
             343.68904, 304.41029, 274.95123, 245.49217, 216.03311, 186.57405, 157.11499, 127.65593,
             # 856
             98.19687, 68.73781, 39.27875, 9.81969, -19.63937, -49.09843, -78.55749, -108.01655,
             # 864
             -137.47561, -186.57405, -206.21342, -225.85279, -245.49217, -265.13154, -284.77092,
             -304.41029,  # 872
             -324.04966, -343.68904, -363.32841, -382.96778, -402.60716, -422.24653, -441.88590,
             -461.52528,  # 880
             -481.16465, -490.98434, -481.16465, -471.34496, -461.52528, -451.70559, -441.88590,
             -432.06622,  # 888
             -422.24653, -412.42684, -402.60716, -392.78747, -382.96778, -373.14810, -363.32841,
             -353.50872,  # 896
             -343.68904, -304.41029, -274.95123, -245.49217, -216.03311, -186.57405, -157.11499,
             -127.65593,  # 904
             -98.19687, -68.73781, -39.27875, -9.81969, 19.63937, 49.09843, 78.55749, 108.01655,
             # 912
             137.47561, 235.67248, 255.31185, 274.95123, 294.59060, 314.22998, 333.86935, 353.50872,
             # 920
             373.14810, 392.78747, 412.42684, 432.06622, 451.70559, 471.34496, 500.80402, 490.98434,
             # 928
             481.16465, 471.34496, 461.52528, 451.70559, 441.88590, 432.06622, 422.24653, 412.42684,
             # 936
             402.60716, 392.78747, 382.96778, 265.13154, 235.67248, 206.21342, 176.75436, 147.29530,
             # 944
             117.83624, 88.37718, 58.91812, 29.45906, 0.00000, -29.45906, -58.91812, -88.37718,
             # 952
             -235.67248, -255.31185, -274.95123, -294.59060, -314.22998, -333.86935, -353.50872,
             -373.14810,  # 960
             -392.78747, -412.42684, -432.06622, -451.70559, -471.34496, -500.80402, -490.98434,
             -481.16465,  # 968
             -471.34496, -461.52528, -451.70559, -441.88590, -432.06622, -422.24653, -412.42684,
             -402.60716,  # 976
             -392.78747, -382.96778, -265.13154, -235.67248, -206.21342, -176.75436, -147.29530,
             -117.83624,  # 984
             -88.37718, -58.91812, -29.45906, 0.00000, 29.45906, 58.91812, 88.37718, 304.41029,
             # 992
             324.04966, 343.68904, 363.32841, 382.96778, 402.60716, 422.24653, 441.88590, 500.80402,
             # 1000
             490.98434, 481.16465, 471.34496, 461.52528, 451.70559, 441.88590, 432.06622, 196.39373,
             # 1008
             166.93467, 137.47561, 108.01655, 78.55749, 49.09843, 19.63937, -9.81969, -304.41029,
             -324.04966, -343.68904, -363.32841, -382.96778, -402.60716, -422.24653, -441.88590,
             -500.80402,
             -490.98434, -481.16465, -471.34496, -461.52528, -451.70559, -441.88590, -432.06622,
             -196.39373,
             -166.93467, -137.47561, -108.01655, -78.55749, -49.09843, -19.63937, 9.81969,
             400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000,
             400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000, 400.00000])

        self.__xcoord = self.__xcoord_raw[:-144]
        self.__ycoord = self.__ycoord_raw[:-144]

        self.__x_edge_max = np.max(self.__xcoord)
        self.__x_edge_min = np.min(self.__xcoord)

        self.__y_edge_max = np.max(self.__ycoord)
        self.__y_edge_min = np.min(self.__ycoord)

        self.step = step
        self._x = np.arange(self.__x_edge_min, self.__x_edge_max, step)
        self._y = np.arange(self.__y_edge_min, self.__y_edge_max, step)
        self._XX, self._YY = np.meshgrid(self._x, self._y)

    def interpolate(self, intensity, method='linear', remove_last=True, plot=False):
        if remove_last:
            intensity = intensity[:-144]
        interpolated_result = interpolate.griddata(points=(self.__xcoord, self.__ycoord),
                                                   values=intensity,
                                                   xi=(self._XX, self._YY),
                                                   fill_value=0,
                                                   method=method)
        if plot:
            plt.pcolormesh(self._XX, self._YY, interpolated_result)
            plt.colorbar()
            plt.title('Linear Interpolation with step:' + str(self.step))
            plt.savefig('interp.jpg')
            plt.show()
        return interpolated_result

    def ROOT_dump_npy(filename, event_idx_list=None, labels=None, dump_folder='/data2T/mariotti_data_2/npy_dump/'):
        with open(filename, 'rb') as f:
            data = pickle.load(f)

        m1 = data['M1_interp']
        m2 = data['M2_interp']

        name = filename[-40:-4]

        if event_idx_list is None:
            event_idx_list = []
        if labels is None:
            labels = {}

        for idx in range(m1.shape[0]):
            event_id_string = name + '_idx_' + str(idx)
            evt1 = m1[idx]
            evt2 = m2[idx]

            # Update Energy, labels and position
            labels[event_id_string] = 0

            # print(evt1.shape, evt2.shape)
            b = np.zeros((67, 68, 4))
            b[:, :, :2] = evt1
            b[:, :, 2:4] = evt2
            identifier = str(md5(b).hexdigest())
            event_id_string = event_id_string + '_' + identifier
            labels[event_id_string] = 0
            event_idx_list.append(event_id_string)
            np.save(dump_folder + event_id_string + '.npy', b)

        return event_idx_list, labels

    # % Toy test
    def MC_dump_npy(filename, event_idx_list=None, labels=None, energy_labels=None, position_labels=None,
                    dump_folder='/data2T/mariotti_data_2/new_dump/'):
        with open(filename, 'rb') as f:
            data = pickle.load(f)

        corsika = data['corsika_event_number_1']
        m1 = data['M1_interp']
        m2 = data['M2_interp']
        energy = data['energy']
        posX1 = data['src_X1'].values
        posY1 = data['src_Y1'].values

        name = filename[-22:-4]

        if event_idx_list is None:
            event_idx_list = []
        if labels is None:
            labels = {}
        if energy_labels is None:
            energy_labels = {}
        if position_labels is None:
            position_labels = {}

        for idx in range(m1.shape[0]):
            evt1 = m1[idx]
            evt2 = m2[idx]

            # print(evt1.shape, evt2.shape)
            b = np.zeros((67, 68, 4))
            b[:, :, :2] = evt1
            b[:, :, 2:4] = evt2

            event_id = name + '_corsika_' + str(corsika[idx])
            identifier = str(md5(b).hexdigest())
            event_id_string = event_id + '_' + identifier

            np.save(dump_folder + '/MC/' + event_id_string + '.npy', b)

            # Update Energy, labels, position and list
            labels[event_id_string] = 1
            energy_labels[event_id_string] = energy[idx]
            position_labels[event_id_string] = [posX1[idx], posY1[idx]]
            event_idx_list.append(event_id_string)

        return event_idx_list, labels, energy_labels, position_labels

    def interp_pos(self, pos):
        pos_x = pos[0]
        pos_y = pos[1]
        idx = np.argmin((self.__xcoord - pos_x) ** 2 + (self.__ycoord - pos_y) ** 2)  # index that give lowest MSE
        # idx_y = np.argmin((self.__ycoord - pos_y)**2)  # index that give lowest MSE
        # print(idx)
        # print(idx)
        values_pos = np.zeros(len(self.__xcoord))
        values_pos[idx] = 10
        interpolated_result = interpolate.griddata(points=(self.__xcoord, self.__ycoord),
                                                   values=values_pos,
                                                   xi=(self._XX, self._YY),
                                                   fill_value=0,
                                                   method='linear')
        pos_int = np.where(interpolated_result == np.max(interpolated_result))
        pos_int_x = pos_int[1][0]
        pos_int_y = pos_int[0][0]
        return pos_int_x, pos_int_y


def screma_allinea(df1, phe1, time1, df2, phe2, time2):
    evt_n_1 = df1['stereo_evt_number'].values
    evt_n_2 = df2['stereo_evt_number'].values

    a, aidx = np.unique(evt_n_1, return_index=True)
    b, bidx = np.unique(evt_n_2, return_index=True)

    phe1_reduced = phe1.iloc[aidx]
    time1_reduced = time1.iloc[aidx]

    phe2_reduced = phe2.iloc[bidx]
    time2_reduced = time2.iloc[bidx]

    res1 = np.isin(a, b)
    res2 = np.isin(b, a)

    phe1_reduced_ok = phe1_reduced[res1]
    time1_reduced_ok = time1_reduced[res1]

    phe2_reduced_ok = phe2_reduced[res2]
    time2_reduced_ok = time2_reduced[res2]

    return phe1_reduced_ok, time1_reduced_ok, phe2_reduced_ok, time2_reduced_ok


def compute_stuff(phe_df, time_df, only_relevant=False):
    camera_MAGIC = CameraGeometry.from_name('MAGICCamMars')
    all_events = []
    for i in range(phe_df.shape[0]):
        event_image = phe_df.iloc[i, :1039]
        clean = tailcuts_clean(camera_MAGIC, event_image, picture_thresh=6, boundary_thresh=4)
        event_image_cleaned = event_image.copy()

        try:
            event_image_cleaned[~clean] = 0

            all_data = {}

            hillas_params = hillas_parameters(camera_MAGIC, event_image_cleaned)
            leakage_params = leakage(camera_MAGIC, event_image, clean)

            all_data.update(hillas_params)
            all_data.update(leakage_params)

            if not only_relevant:
                event_time = time_df.iloc[i, :1039]
                conc = concentration(camera_MAGIC, event_image, hillas_params)
                n_islands, island_id = number_of_islands(camera_MAGIC, clean)
                timing = timing_parameters(
                    camera_MAGIC[clean],
                    event_image[clean],
                    event_time[clean],
                    hillas_params,
                )
                all_data.update(conc)
                all_data.update(timing)
            all_events.append(all_data)
        except ctapipe.image.hillas.HillasParameterizationError:
            print(f'Skippato! sum={np.sum(event_image_cleaned)}')
            all_events.append({'skipped': i, 'skipped_sum': np.sum(event_image_cleaned)})

    df2 = pd.DataFrame(all_events)

    return df2


def read_from_root(filename, want_extra=False, pruning=False, clean=False):
    ARRAY_COLUMNS = {
        'MMcEvt.fEvtNumber': 'corsika_event_number',
        'MMcEvt.fEnergy': 'energy',
        'MMcEvt.fTheta': 'theta',
        'MMcEvt.fPhi': 'phi',
        'MMcEvt.fCoreX': 'core_x',
        'MMcEvt.fCoreY': 'core_y',
        'MMcEvt.fImpact': 'impact',
        'MMcEvt.fTelescopePhi': 'telescope_phi',
        'MMcEvt.fTelescopeTheta': 'telescope_theta',
        'MSrcPosCam.fX': 'srcpos_x',
        'MSrcPosCam.fY': 'srcpos_y',
        'MRawEvtHeader.fStereoEvtNumber': 'stereo_evt_number'
    }

    PIXEL_COLUMNS = {
        'MArrivalTime.fData': 'photon_time',
        'MCerPhotEvt.fPixels.fPhot': 'phe',
    }

    f = uproot.open(filename)

    tree = f['Events']
    ids = np.arange(tree.numentries)
    df = tree.pandas.df(ARRAY_COLUMNS.keys())
    df.rename(columns=ARRAY_COLUMNS, inplace=True)

    df['event_id'] = ids
    df = df[df['stereo_evt_number'] > 0]  # Select the events that triggered in both telescopes

    # print('reading phe and time..')
    df2 = tree.pandas.df(PIXEL_COLUMNS.keys())  # The dataframe containing the pixel data
    df2.rename(columns=PIXEL_COLUMNS, inplace=True)

    # print('clean messy values')
    # Clean messy values
    df2['photon_time'].loc[df2['photon_time'] < 0] = 30
    df2['photon_time'].loc[df2['photon_time'] > 60] = 30

    # EVENT START FROM 1
    event_idx = df['event_id'].values

    time = df2['photon_time'].loc[event_idx].unstack(level=-1)
    time_copy = time.copy()
    phe = df2['phe'].loc[event_idx].unstack(level=-1)
    phe_copy = phe.copy()

    if clean:
        camera_MAGIC = CameraGeometry.from_name('MAGICCamMars')
        for idx in range(phe.shape[0]):
            clean = tailcuts_clean(camera_MAGIC,
                                   phe.iloc[idx, :1039],
                                   boundary_thresh=10,
                                   picture_thresh=5,
                                   min_number_picture_neighbors=2)
            phe.iloc[idx, :1039][~ clean] = 0.
            time.iloc[idx, :1039][~ clean] = 0.

    # Compute hillas parameters, leakage and other hand-crafted features
    if want_extra:
        extras = compute_stuff(phe_copy, time_copy, only_relevant=False)

        # Filter with some criterion
        if pruning:
            intensity_ok = extras['intensity'] > 100
            leak_ok = extras['leakage1_pixel'] < 0.2
            condition = np.logical_and(intensity_ok, leak_ok)

            return df[condition.values], extras[condition.values], phe[condition.values], time[condition.values]

        return df, extras, phe, time

    return df, phe, time


def read_from_root_realdata(filename, want_extra=False, clean=False, pruning=False):
    ARRAY_COLUMNS = {
        'MRawEvtHeader.fStereoEvtNumber': 'stereo_evt_number',
        'MTime.fTime.fMilliSec': 'millisec',
        'MTime.fNanoSec': 'nanosec',
        'MRawEvtHeader.fTimeDiff': 'timediff',
        # 'MRawEvtHeader.fTheta' : 'theta'
    }

    PIXEL_COLUMNS = {
        'MArrivalTime.fData': 'photon_time',
        'MCerPhotEvt.fPixels.fPhot': 'phe',
    }

    # print('opening root file')
    f = uproot.open(filename)

    tree = f['Events']
    ids = np.arange(tree.numentries)
    # print('defining df...')
    df = tree.pandas.df(ARRAY_COLUMNS.keys())
    df.rename(columns=ARRAY_COLUMNS, inplace=True)

    df['event_id'] = ids
    df = df[df['stereo_evt_number'] > 0]  # Select the events that triggered in both telescopes

    # print('reading phe and time..')
    df2 = tree.pandas.df(PIXEL_COLUMNS.keys())  # The dataframe containing the pixel data
    df2.rename(columns=PIXEL_COLUMNS, inplace=True)

    # print('clean messy values')
    # Clean messy values
    df2['photon_time'].loc[df2['photon_time'] < 0] = 30
    df2['photon_time'].loc[df2['photon_time'] > 60] = 30

    # EVENT START FROM 1
    # event_idx = df['event_id'].values

    # print('unstack time...')
    # time = df2['photon_time'].loc[event_idx].unstack(level=-1)
    time = df2['photon_time'].unstack(level=-1)

    # print('unstack phe...')
    # phe = df2['phe'].loc[event_idx].unstack(level=-1)
    phe = df2['phe'].unstack(level=-1)

    # time = df2['photon_time'].loc[event_idx].unstack(level=-1)
    time_copy = time.copy()
    # phe = df2['phe'].loc[event_idx].unstack(level=-1)
    phe_copy = phe.copy()

    if clean:
        camera_MAGIC = CameraGeometry.from_name('MAGICCamMars')
        for idx in range(phe.shape[0]):
            clean = tailcuts_clean(camera_MAGIC,
                                   phe.iloc[idx, :1039],
                                   boundary_thresh=10,
                                   picture_thresh=5,
                                   min_number_picture_neighbors=2)
            phe.iloc[idx, :1039][~ clean] = 0.
            time.iloc[idx, :1039][~ clean] = 0.

    # Compute hillas parameters, leakage and other hand-crafted features
    if want_extra:
        extras = compute_stuff(phe_copy, time_copy, only_relevant=False)

        # Filter with some criterion
        if pruning:
            intensity_ok = extras['intensity'] > 100
            leak_ok = extras['leakage1_pixel'] < 0.2
            condition = np.logical_and(intensity_ok, leak_ok)

            return df[condition.values], extras[condition.values], phe[condition.values], time[condition.values]

        return df, extras, phe, time

    # print('done.')

    return df, phe, time


def ROOT_dump_npy(m1, m2, filename, event_idx_list=None, labels=None,
                  dump_folder='/data/magic_data/ROOT_npy_6oct2018'):
    name = filename  # [-40:-4]

    if event_idx_list is None:
        event_idx_list = []
    if labels is None:
        labels = {}

    for idx in range(m1.shape[0]):
        event_id_string = name + '_idx_' + str(idx)
        event_idx_list.append(event_id_string)
        evt1 = m1[idx]
        evt2 = m2[idx]

        # Update Energy, labels and position
        labels[event_id_string] = 0

        # print(evt1.shape, evt2.shape)
        b = np.zeros((67, 68, 4))
        b[:, :, :2] = evt1
        b[:, :, 2:4] = evt2
        np.save(dump_folder + '/' + event_id_string + '.npy', b)

    return event_idx_list, labels


def is_zenith_ok(filename, zenith_upper_limit=35):
    # print('opening root file')
    f = uproot.open(filename)

    # Zenith check:
    drive_tree = f['Drive']
    df_zenith = drive_tree.pandas.df({'MReportDrive.fCurrentZd'})
    global_zenith = np.mean(df_zenith.values)
    if global_zenith < zenith_upper_limit:
        print(f'file {filename} has a Zenith of {global_zenith}, thus ok.')
        return True
    else:
        print(f'file {filename} has a Zenith of {global_zenith}, thus not considering it.')
        return False


def stereo_interp_from_root_realdata(filenames):
    filenameM1 = filenames[0]
    filenameM2 = filenames[1]

    if filenameM1[-26:-7] != filenameM2[-26:-7]:
        print('Ostia! filename are different: ', filenameM1, filenameM2)
        return None  # Escape

    if os.stat(filenameM1).st_size == 0:
        print('Empty file: ' + filenameM1)
        return None

    if os.stat(filenameM2).st_size == 0:
        print('Empty file: ' + filenameM2)
        return None

    if not is_zenith_ok(filenameM1):
        return None

    if not is_zenith_ok(filenameM2):
        return None

    bef = time.time()
    df1, phe1, time1 = read_from_root_realdata(filenameM1, clean=True)
    df2, phe2, time2 = read_from_root_realdata(filenameM2, clean=True)
    phe1, time1, phe2, time2 = screma_allinea(df1, phe1, time1, df2, phe2, time2)
    bef2 = time.time()
    interpolator = InterpolateMagic(15)
    num_events = phe1.shape[0]
    m1_interp = np.zeros((num_events, 67, 68, 2))
    m2_interp = np.zeros((num_events, 67, 68, 2))

    for idx in range(len(phe1)):
        m1_interp[idx, :, :, 0] = interpolator.interpolate(time1.iloc[idx, :1039].values, remove_last=False, plot=False)
        m1_interp[idx, :, :, 1] = interpolator.interpolate(phe1.iloc[idx, :1039].values, remove_last=False, plot=False)

        m2_interp[idx, :, :, 0] = interpolator.interpolate(time2.iloc[idx, :1039].values, remove_last=False, plot=False)
        m2_interp[idx, :, :, 1] = interpolator.interpolate(phe2.iloc[idx, :1039].values, remove_last=False, plot=False)

    # result = {'M1_interp': m1_interp, 'M2_interp': m2_interp}

    event_idx_list, labels = ROOT_dump_npy(m1=m1_interp, m2=m2_interp, filename=filenameM1[-42:-4],
                                           dump_folder='/data/magic_data/clean_10_5/crab/npy_dump')
    #
    with open(
            '/data/magic_data/clean_10_5/crab/complement/eventList_labels_' + filenameM1[-42:-4] + '.pkl',
            'wb') as f:
        pickle.dump((event_idx_list, labels), f, protocol=2)
    print(filenameM1[-40:-4])
    print('che fatica... ho fatto.. (un file)')


def stereo_interp_from_txt(filenames):
    filenameM1 = filenames[0]
    filenameM2 = filenames[1]

    if filenameM1[-26:-7] != filenameM2[-26:-7]:
        print('Ostia! filename are different: ', filenameM1, filenameM2)
        return None  # Escape

    if os.stat(filenameM1).st_size == 0:
        print('Empty file: ' + filenameM1)
        return None

    if os.stat(filenameM2).st_size == 0:
        print('Empty file: ' + filenameM2)
        return None

    m1 = pd.read_csv(filenameM1, sep=' ', header=None)
    m2 = pd.read_csv(filenameM2, sep=' ', header=None)

    if m1.shape[1] < 1000:
        print('OSTIA! It is not full in columns the file:' + filenameM1)
        return None

    if m2.shape[1] < 1000:
        print('OSTIA! It is not full in columns the file:' + filenameM2)
        return None

    # put int trigger1 the values of the trigger of the txt that have the highest number of simulated events.
    # Not really elegant, but it should work.
    if m1.iloc[:, 0].shape[0] < m2.iloc[:, 0].shape[0]:
        trigger1 = np.array(m1.iloc[:, 0])
        trigger2 = np.array(m2.iloc[:, 0])
    else:
        trigger2 = np.array(m1.iloc[:, 0])
        trigger1 = np.array(m2.iloc[:, 0])

    m1_idx_mask = np.isin(trigger1, trigger2)

    trigger_values = m1.iloc[m1_idx_mask, 0].values
    position_1 = m1.iloc[m1_idx_mask, 2:4].values
    position_2 = m2.iloc[m1_idx_mask, 2:4].values
    energy = m1.iloc[m1_idx_mask, 1].values
    pixel_m1 = m1.iloc[m1_idx_mask, 2 + 2:1041 + 2].values
    pixel_m2 = m2.iloc[m1_idx_mask, 2 + 2:1041 + 2].values

    interpolator = InterpolateMagic(15)
    m1_interp = [interpolator.interpolate(instance, remove_last=False, plot=False) for instance in pixel_m1]
    m2_interp = [interpolator.interpolate(instance, remove_last=False, plot=False) for instance in pixel_m2]

    result = {'trigger': trigger_values,
              'energy': energy,
              'positionM1': position_1, 'positionM2': position_2,
              'M1_interp': m1_interp, 'M2_interp': m2_interp}
    print(filenameM1[-26:-7])
    with open('/data2T/mariotti_data_2/src_pos_cam/result_' + filenameM1[-26:-7] + '.pkl',
              'wb') as f:
        pickle.dump(result, f, protocol=2)


# %


###############
###############
def MC_dump_npy(corsika, m1, m2, energy, posX1, posY1, filename, event_idx_list=None, labels=None, energy_labels=None,
                position_labels=None,
                dump_folder='/home/emariott/deepmagic/data_interpolated/point_like'):
    # with open(filename, 'rb') as f:
    #     data = pkl.load(f)

    # corsika = data['corsika_event_number_1']
    # m1 = data['M1_interp']
    # m2 = data['M2_interp']
    # energy = data['energy']
    # posX1 = data['src_X1'].values
    # posY1 = data['src_Y1'].values

    name = filename

    if event_idx_list is None:
        event_idx_list = []
    if labels is None:
        labels = {}
    if energy_labels is None:
        energy_labels = {}
    if position_labels is None:
        position_labels = {}

    for idx in range(m1.shape[0]):
        evt1 = m1[idx]
        evt2 = m2[idx]

        # print(evt1.shape, evt2.shape)
        b = np.zeros((67, 68, 4))
        b[:, :, :2] = evt1
        b[:, :, 2:4] = evt2

        event_id = name + '_corsika_' + str(corsika[idx])
        identifier = str(md5(b).hexdigest())
        event_id_string = event_id + '_' + identifier

        # Dump the npy
        np.save(dump_folder + '/' + event_id_string + '.npy', b)

        # Update Energy, labels and position
        labels[event_id_string] = 1
        energy_labels[event_id_string] = energy[idx]
        position_labels[event_id_string] = [posX1[idx], posY1[idx]]
        event_idx_list.append(event_id_string)

    return event_idx_list, labels, energy_labels, position_labels


def stereo_interp_from_root(filenames):
    filenameM1 = filenames[0]
    filenameM2 = filenames[1]

    if filenameM1[-26:-7] != filenameM2[-26:-7]:
        print('Ostia! filename are different: ', filenameM1, filenameM2)
        return None  # Escape

    if os.stat(filenameM1).st_size == 0:
        print('Empty file: ' + filenameM1)
        return None

    if os.stat(filenameM2).st_size == 0:
        print('Empty file: ' + filenameM2)
        return None

    df1, phe1, time1 = read_from_root(filenameM1, want_extra=False, pruning=False, clean=True)
    df2, phe2, time2 = read_from_root(filenameM2, want_extra=False, pruning=False, clean=True)

    interpolator = InterpolateMagic(15)
    num_events = phe1.shape[0]
    m1_interp = np.zeros((num_events, 67, 68, 2))
    m2_interp = np.zeros((num_events, 67, 68, 2))
    pos_interp1 = np.zeros((num_events, 2))
    pos_interp2 = np.zeros((num_events, 2))
    for idx in range(len(phe1)):
        m1_interp[idx, :, :, 0] = interpolator.interpolate(time1.iloc[idx, :1039].values, remove_last=False, plot=False)
        m1_interp[idx, :, :, 1] = interpolator.interpolate(phe1.iloc[idx, :1039].values, remove_last=False, plot=False)
        pos_interp1[idx, :] = interpolator.interp_pos([df1['srcpos_x'].iloc[idx], df1['srcpos_y'].iloc[idx]])

        m2_interp[idx, :, :, 0] = interpolator.interpolate(time2.iloc[idx, :1039].values, remove_last=False, plot=False)
        m2_interp[idx, :, :, 1] = interpolator.interpolate(phe2.iloc[idx, :1039].values, remove_last=False, plot=False)
        pos_interp2[idx, :] = interpolator.interp_pos([df2['srcpos_x'].iloc[idx], df2['srcpos_y'].iloc[idx]])

    result = {'corsika_event_number_1': df1['corsika_event_number'].values,
              'corsika_event_number_2': df2['corsika_event_number'].values,
              'energy': df1['energy'].values,
              'impact': df1['impact'].values,
              'complete_simulation_parameters_M1': df1,
              'complete_simulation_parameters_M2': df2,
              'src_X1': df1['srcpos_x'].values, 'src_Y1': df1['srcpos_y'].values,
              'src_X2': df2['srcpos_x'].values, 'src_Y2': df2['srcpos_y'].values,
              # 'extras1': extras1,
              # 'extras2': extras2,
              'pos_interp1': pos_interp1, 'pos_interp2': pos_interp2,
              'M1_interp': m1_interp, 'M2_interp': m2_interp}

    try:
        event_idx_list, labels, energy_labels, position_labels = MC_dump_npy(corsika=result['corsika_event_number_1'],
                                                                             m1=m1_interp, m2=m2_interp,
                                                                             energy=result['energy'],
                                                                             posX1=result['src_X1'],
                                                                             posY1=result['src_Y1'],
                                                                             filename=filenameM1[-27:-5],
                                                                             dump_folder='/data/magic_data/clean_10_5/point_MC/npy_dump')

        with open(
                '/data/magic_data/clean_10_5/point_MC/complement' + filenameM1[-27:-5] + '.pkl', 'wb') as f:
            pickle.dump((event_idx_list, labels, energy_labels, position_labels, df1, df2), f,
                        protocol=2)

        # print(f'Saved {filenameM1[-28:-5]}')
    except KeyError:
        print(f'Ker error for file {filenameM1}')


#####################################
#####################################
#####################################
#####################################
#####################################
#####################################
#####################################
#####################################
#####################################
#####################################
#####################################
#### MONTECARLOS
# Load all the filenames


fileM1 = glob.glob('/data/magic_data/point_mc_rootfiles/*M1*.root')
fileM2 = glob.glob('/data/magic_data/point_mc_rootfiles/*M2*.root')


# %%
def get_pair_match(a, b):
    result = []
    for i in a:
        for j in b:
            if i[-28:-5] == j[-28:-5]:  # -28:-5 for MC. -42:-6 for ROOT. -40:-5 for Crab
                result.append((i, j))
    return result


def imap_unordered_bar(func, args, n_processes=2):
    p = multiprocessing.Pool(n_processes)
    res_list = []
    with tqdm(total=len(args)) as pbar:
        for i, res in tqdm(enumerate(p.imap_unordered(func, args))):
            pbar.update()
            res_list.append(res)
    pbar.close()
    p.close()
    p.join()
    return res_list


mFull = get_pair_match(fileM1, fileM2)

# print(len(mFull))

#%%
print('It\'s Bum-Bum time:')
# Start the parallel computing
num_cpus = multiprocessing.cpu_count()
print(f'start multiprocessing with {num_cpus} jobs')
print(f'dumping {len(mFull)} files')
imap_unordered_bar(stereo_interp_from_root, mFull, n_processes=num_cpus)
# pool = multiprocessing.Pool(processes=num_cpus)
# pool.map(stereo_interp_from_root, mFull)
# pool.close()
# pool.join()
print('All done, MONTACARLO Interpolation went fine')

#####################################
#####################################
#####################################
#####################################
#####################################
#####################################
#####################################
# %% ROOT FILES
# print('##########################')
# print('##########################')
# print('####### Intermezzo.. #####')
# print('##########################')
# print('##########################')
#
# print('Start with ROOT FILES')
# print('Change filenames...')
# filelist = glob.glob('/ph14-data1/users/mariotti_data/raw_real_data_files/2018*')
# os.system('cd /ph14-data1/users/mariotti_data/raw_real_data_files')
# for a in tqdm(filelist):
#     os.system('mv ' + a + ' ' + a[:a.find('?')])
#
# #
# print('filenames changed.')
#
# fileM1 = glob.glob('/data/magic_data/raw_files/*M1*')
# fileM2 = glob.glob('/data/magic_data/raw_files/*M2*')
#
#
# def get_pair_match(a, b):
#     result = []
#     for i in a:
#         for j in b:
#             if i[-42:-6] == j[-42:-6]:  # -28:-5 for MC. -42:-6 for ROOT
#                 result.append((i, j))
#     return result
#
#
# mFull = get_pair_match(fileM1, fileM2)
#
# # %%
# # Start the parallel computing
# print('Start interp ROOT')
# num_cpus = 11  # multiprocessing.cpu_count()
# print('start multiprocessing ROOT files with {} jobs'.format(num_cpus))
# imap_unordered_bar(stereo_interp_from_root_realdata, mFull, n_processes=num_cpus)
#
# # pool = multiprocessing.Pool(processes=num_cpus)
# # pool.map(stereo_interp_from_root_realdata, mFull)
# # pool.close()
# # pool.join()
# print('All done, ROOT Interpolation went fine')
